name: Maven tests and coverage report with multiple JVM flags

on:
  pull_request:
  push:

jobs: 
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jvm_flag:
          - "-Xmx512m"
          - "-XX:+AlwaysPreTouch"
          - "-XX:+UseG1GC"
          - "-XX:+UseStringDeduplication"
          - "-XX:+UnlockExperimentalVMOptions -XX:+UseCompressedOops"

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
      
      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Sanitize the JVM flag for artifact names
      - name: Sanitize JVM Flag
        id: sanitize
        run: |
          sanitized_flag=$(echo "${{ matrix.jvm_flag }}" | sed 's/[:+]/_/g')
          echo "sanitized_flag=$sanitized_flag" >> $GITHUB_ENV

      # Run Maven tests with different JVM flags and generate JaCoCo coverage report
      - name: Run Maven tests with JVM Flag and generate coverage report
        run: |
          echo "Running tests with JVM flag: ${{ matrix.jvm_flag }}"
          mvn clean verify -DargLine="${{ matrix.jvm_flag }} ${jacoco.agent.argLine}"
        env:
          JVM_OPTS: ${{ matrix.jvm_flag }}

      # Upload JaCoCo Coverage Report as an artifact with sanitized name
      - name: Upload JaCoCo Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report-${{ env.sanitized_flag }}
          path: target/site/jacoco/  # Path to the JaCoCo report

      # Save test logs
      - name: Save Test Logs
        run: |
          mkdir -p logs
          mv target/surefire-reports/*.txt logs/
        if: always()

      # Upload the logs as an artifact for each JVM flag with sanitized name
      - name: Upload Test Logs
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ env.sanitized_flag }}
          path: logs/

      # Generate and list untested classes
      - name: Generate untested classes list
        run: |
          if [ -f target/site/jacoco/jacoco.xml ]; then
            grep '<counter type="INSTRUCTION" missed="[1-9]' target/site/jacoco/jacoco.xml | sed -n 's/.*name="\(.*\)" .*missed=".*"/\1/p' > untested-classes.txt
            if [ -s untested-classes.txt ]; then
              echo "<html><head><title>Untested Classes</title></head><body><h1>Untested Classes</h1><ul>" > untested-classes.html
              while read class; do
                echo "<li>$class</li>" >> untested-classes.html
              done < untested-classes.txt
              echo "</ul></body></html>" >> untested-classes.html
            else
              echo "<html><head><title>Untested Classes</title></head><body><h1>All classes have been fully tested</h1></body></html>" > untested-classes.html
            fi
          fi

      # Upload the list of untested classes as an artifact with sanitized name
      - name: Upload Untested Classes List
        uses: actions/upload-artifact@v3
        with:
          name: untested-classes-${{ env.sanitized_flag }}
          path: untested-classes.html

      # Fail if coverage has not improved
      - name: Get JaCoCo Coverage
        id: coverage  
        run: |
          coverage=$(python3 config/coverage.py target/site/jacoco/jacoco.csv) 
          echo "COVERAGE=$coverage" >> $GITHUB_ENV

      - name: Fail if coverage has not improved.
        run: |
          coverage=$COVERAGE
          threshold=81.58
          if (( $(echo "$coverage - $threshold <= 0.1" | bc -l) )); then
            echo "Coverage has not improved."
            exit 1
          else
            echo "New coverage: $coverage%"
          fi
